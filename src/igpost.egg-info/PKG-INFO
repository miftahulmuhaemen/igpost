Metadata-Version: 2.4
Name: igpost
Version: 0.1.0
Summary: FastAPI service to upload videos to Instagram using instagrapi
Author: Sahana
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: instagrapi>=2.2.0
Requires-Dist: fastapi>=0.111.0
Requires-Dist: uvicorn[standard]>=0.30.0
Requires-Dist: python-multipart>=0.0.6

# igpost

FastAPI service for uploading videos to Instagram using instagrapi.

## Features
- Upload videos via HTTP API
- Get account profile information
- Session persistence for authentication
- Docker support with Alpine Linux

## Prerequisites
- Python 3.9+
- `uv` installed (recommended) or `pip`

## API Endpoints

### Health Check
```bash
GET /health
```

### Get Profile
```bash
GET /profile?username=your_user&password=your_pass
# OR
GET /profile?session_id=your_session_id
```

### Upload Video
```bash
POST /upload
Content-Type: multipart/form-data

Fields:
- video: (file, optional) Video file to upload (binary)
- video_path: (string, optional) Path to video file on server
- description: (string) Caption for the post
- username: (string, optional) Instagram username
- password: (string, optional) Instagram password  
- session_id: (string, optional) Instagram session ID
- session_file: (string, optional) Session file path (default: session.json)

Note: Provide either 'video' (file upload) or 'video_path' (server path), not both.
```

## Local Development

### Using uv (Recommended)
```bash
# Install dependencies
uv sync

# Run the service
uv run uvicorn igpost.api.app:app --host 0.0.0.0 --port 8000 --reload
```

### Using pip
```bash
# Install dependencies
pip install -e .

# Run the service
uvicorn igpost.api.app:app --host 0.0.0.0 --port 8000 --reload
```

## Docker Usage

### Build and Run
```bash
# Build image
docker build -t igpost:latest .

# Run container
docker run -p 8000:8000 -v ./sessions:/sessions igpost:latest
```

### Docker Compose
```bash
docker compose up --build -d
```

### Windows Volume Mounting
The docker-compose.yml includes a volume mount for Windows:
- Windows C: drive is mounted as `/uploads` (read-only)
- Access Windows files via `/uploads/Users/username/...`
- Example: `/uploads/Users/john/Videos/myvideo.mp4`

## API Examples

### Upload with binary file
```bash
curl -X POST http://localhost:8000/upload \
  -F "video=@/path/to/video.mp4" \
  -F "description=My awesome video" \
  -F "username=your_username" \
  -F "password=your_password"
```

### Upload with file path (mounted volume)
```bash
curl -X POST http://localhost:8000/upload \
  -F "video_path=/uploads/Users/me/Videos/video.mp4" \
  -F "description=My awesome video" \
  -F "username=your_username" \
  -F "password=your_password"
```

### Upload with session ID
```bash
curl -X POST http://localhost:8000/upload \
  -F "video=@/path/to/video.mp4" \
  -F "description=My awesome video" \
  -F "session_id=your_session_id"
```

### Get profile
```bash
curl "http://localhost:8000/profile?username=your_user&password=your_pass"
```

## Authentication Priority
1. **Session ID** (if provided) - fastest, no re-authentication
2. **Username/Password** (if provided) - creates new session

## Session Persistence
- Sessions are automatically saved to `/sessions/session.json` in the container
- Mount `./sessions:/sessions` to persist sessions between container restarts
- Each session can be reused for multiple uploads

## Library Reference
- [instagrapi on GitHub](https://github.com/subzeroid/instagrapi)
